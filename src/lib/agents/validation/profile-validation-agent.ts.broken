/**
 * Profile Validation Agent
 * Comprehensive validation system for player and coach profiles
 */

interface ValidationRule {
  field: string;
  type: 'required' | 'format' | 'range' | 'consistency' | 'logic';
  description: string;
  validate: (value: any, profile: any) => ValidationResult;
}

interface ValidationResult {
  valid: boolean;
  severity: 'error' | 'warning' | 'info';
  message: string;
  suggestion?: string;
}

interface ProfileValidationReport {
  profileId: string;
  profileType: 'player' | 'coach';
  overallScore: number;
  validationsPassed: number;
  validationsFailed: number;
  validationsWarning: number;
  issues: ValidationIssue[];
  completenessMetrics: {
    requiredFields: number;
    optionalFields: number;
    dataQuality: number;
    consistency: number;
  };
  recommendations: string[];
}

interface ValidationIssue {
  field: string;
  severity: 'error' | 'warning' | 'info';
  message: string;
  currentValue: any;
  expectedValue?: any;
  suggestion: string;
}

export class ProfileValidationAgent {
  private playerValidationRules: ValidationRule[] = [];
  private coachValidationRules: ValidationRule[] = [];
  private statisticalRanges: Map<string, any> = new Map();

  constructor() {
    this.initializePlayerValidationRules();
    this.initializeCoachValidationRules();
    this.initializeStatisticalRanges();
  }

  async validatePlayerProfile(profile: any): Promise<ProfileValidationReport> {
    console.log(`üîç Validating player profile: ${profile?.name || 'Unknown'}`);
    
    const report: ProfileValidationReport = {
      profileId: `${profile?.name}-${profile?.school}`,
      profileType: 'player',
      overallScore: 0,
      validationsPassed: 0,
      validationsFailed: 0,
      validationsWarning: 0,
      issues: [],
      completenessMetrics: {
        requiredFields: 0,
        optionalFields: 0,
        dataQuality: 0,
        consistency: 0
      },
      recommendations: []
    };

    if (!profile) {
      report.issues.push({
        field: 'profile',
        severity: 'error',
        message: 'Profile data is null or undefined',
        currentValue: null,
        suggestion: 'Regenerate profile data'
      });
      return report;
    }

    // Run all validation rules
    for (const rule of this.playerValidationRules) {
      try {
        const result = rule.validate(this.getFieldValue(profile, rule.field), profile);
        
        if (result.valid) {
          report.validationsPassed++;
        } else {
          if (result.severity === 'error') {
            report.validationsFailed++;
          } else if (result.severity === 'warning') {
            report.validationsWarning++;
          }
          
          report.issues.push({
            field: rule.field,
            severity: result.severity,
            message: result.message,
            currentValue: this.getFieldValue(profile, rule.field),
            suggestion: result.suggestion || 'Review and correct this field'
          });
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Validation rule failed for ${rule.field}:`, error.message);
      }
    }

    // Calculate completeness metrics
    report.completenessMetrics = this.calculatePlayerCompleteness(profile);
    
    // Generate recommendations
    report.recommendations = this.generatePlayerRecommendations(profile, report.issues);
    
    // Calculate overall score
    report.overallScore = this.calculateOverallScore(report);
    
    console.log(`‚úÖ Validation complete: ${report.overallScore.toFixed(1)}/100 score, ${report.validationsFailed} errors, ${report.validationsWarning} warnings`);
    
    return report;
  }

  async validateCoachProfile(profile: any): Promise<ProfileValidationReport> {
    console.log(`üîç Validating coach profile: ${profile?.name || 'Unknown'}`);
    
    const report: ProfileValidationReport = {
      profileId: `${profile?.name}-${profile?.school}`,
      profileType: 'coach',
      overallScore: 0,
      validationsPassed: 0,
      validationsFailed: 0,
      validationsWarning: 0,
      issues: [],
      completenessMetrics: {
        requiredFields: 0,
        optionalFields: 0,
        dataQuality: 0,
        consistency: 0
      },
      recommendations: []
    };

    if (!profile) {
      report.issues.push({
        field: 'profile',
        severity: 'error',
        message: 'Profile data is null or undefined',
        currentValue: null,
        suggestion: 'Regenerate profile data'
      });
      return report;
    }

    // Run all validation rules
    for (const rule of this.coachValidationRules) {
      try {
        const result = rule.validate(this.getFieldValue(profile, rule.field), profile);
        
        if (result.valid) {
          report.validationsPassed++;
        } else {
          if (result.severity === 'error') {
            report.validationsFailed++;
          } else if (result.severity === 'warning') {
            report.validationsWarning++;
          }
          
          report.issues.push({
            field: rule.field,
            severity: result.severity,
            message: result.message,
            currentValue: this.getFieldValue(profile, rule.field),
            suggestion: result.suggestion || 'Review and correct this field'
          });
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Validation rule failed for ${rule.field}:`, error.message);
      }
    }

    // Calculate completeness metrics
    report.completenessMetrics = this.calculateCoachCompleteness(profile);
    
    // Generate recommendations
    report.recommendations = this.generateCoachRecommendations(profile, report.issues);
    
    // Calculate overall score
    report.overallScore = this.calculateOverallScore(report);
    
    console.log(`‚úÖ Validation complete: ${report.overallScore.toFixed(1)}/100 score, ${report.validationsFailed} errors, ${report.validationsWarning} warnings`);
    
    return report;
  }

  async validateBatch(profiles: any[], type: 'player' | 'coach'): Promise<{
    reports: ProfileValidationReport[];
    batchSummary: any;
  }> {
    console.log(`üîç Starting batch validation for ${profiles.length} ${type} profiles`);
    
    const reports: ProfileValidationReport[] = [];
    const batchStartTime = Date.now();
    
    // Process profiles in batches of 5
    const batchSize = 5;
    for (let i = 0; i < profiles.length; i += batchSize) {
      const batch = profiles.slice(i, i + batchSize);
      
      const batchPromises = batch.map(async (profile, index) => {
        try {
          if (type === 'player') {
            return await this.validatePlayerProfile(profile);
          } else {
            return await this.validateCoachProfile(profile);
          }
        } catch (error) {
          console.error(`‚ùå Validation failed for profile ${i + index + 1}:`, error);
          return null;
        }
      });
      
      const batchResults = await Promise.allSettled(batchPromises);
      const validReports = batchResults
        .filter((result): result is PromiseFulfilledResult<ProfileValidationReport> => 
          result.status === 'fulfilled' && result.value !== null)
        .map(result => result.value);
      
      reports.push(...validReports);
      
      console.log(`‚úÖ Processed batch ${Math.floor(i / batchSize) + 1}: ${validReports.length}/${batch.length} successful`);
    }
    
    const batchTime = Date.now() - batchStartTime;
    
    // Generate batch summary
    const batchSummary = this.generateBatchSummary(reports, batchTime);
    
    console.log(`üéØ Batch validation complete: ${reports.length}/${profiles.length} profiles validated in ${(batchTime / 1000).toFixed(1)}s`);
    
    return { reports, batchSummary };
  }

  private initializePlayerValidationRules(): void {
    this.playerValidationRules = [
      // Required field validations
      {
        field: 'name',
        type: 'required',
        description: 'Player name must be present and non-empty',
        validate: (value) => ({
          valid: value && typeof value === 'string' && value.trim().length > 0,
          severity: 'error' as const,
          message: value ? 'Name is present' : 'Player name is required',
          suggestion: 'Provide the player\'s full name'
        })
      },
      
      {
        field: 'school',
        type: 'required',
        description: 'School must be a valid Big 12 institution',
        validate: (value) => {
          const big12Schools = [
            'Arizona', 'Arizona State', 'Baylor', 'BYU', 'Cincinnati',
            'Colorado', 'Houston', 'Iowa State', 'Kansas', 'Kansas State',
            'Oklahoma State', 'TCU', 'Texas Tech', 'UCF', 'Utah', 'West Virginia'
          ];
          
          return {
            valid: value && big12Schools.includes(value),
            severity: 'error' as const,
            message: big12Schools.includes(value) ? 'Valid Big 12 school' : 'Invalid or missing school',
            suggestion: 'Must be one of the 16 Big 12 schools'
          };
        }
      },
      
      {
        field: 'position',
        type: 'required',
        description: 'Position must be a valid football position',
        validate: (value) => {
          const validPositions = ['QB', 'RB', 'WR', 'TE', 'OL', 'DL', 'LB', 'DB', 'K', 'P'];
          
          return {
            valid: value && validPositions.includes(value),
            severity: 'error' as const,
            message: validPositions.includes(value) ? 'Valid position' : 'Invalid or missing position',
            suggestion: 'Must be a standard football position abbreviation'
          };
        }
      },
      
      {
        field: 'year',
        type: 'required',
        description: 'Academic year must be valid',
        validate: (value) => {
          const validYears = ['Freshman', 'Sophomore', 'Junior', 'Senior', 'Graduate'];
          
          return {
            valid: value && validYears.includes(value),
            severity: 'error' as const,
            message: validYears.includes(value) ? 'Valid academic year' : 'Invalid or missing year',
            suggestion: 'Must be Freshman, Sophomore, Junior, Senior, or Graduate'
          };
        }
      },

      // Physical attributes validation
      {
        field: 'physical_attributes.height',
        type: 'range',
        description: 'Height should be realistic for a football player',
        validate: (value, profile) => {
          if (!value) {
            return {
              valid: false,
              severity: 'warning' as const,
              message: 'Height not provided',
              suggestion: 'Add player height in inches'
            };
          }
          
          const height = typeof value === 'string' ? this.parseHeight(value) : value;
          const position = profile?.position;
          const ranges = this.statisticalRanges.get(position) || { height: [64, 80] };
          
          const isValid = height >= ranges.height[0] && height <= ranges.height[1];
          
          return {
            valid: isValid,
            severity: isValid ? 'info' as const : 'warning' as const,
            message: isValid ? 'Height within expected range' : `Height (${height}") unusual for ${position}`,
            suggestion: isValid ? undefined : `Expected range for ${position}: ${ranges.height[0]}-${ranges.height[1]} inches`
          };
        }
      },

      {
        field: 'physical_attributes.weight',
        type: 'range',
        description: 'Weight should be realistic for position',
        validate: (value, profile) => {
          if (!value) {
            return {
              valid: false,
              severity: 'warning' as const,
              message: 'Weight not provided',
              suggestion: 'Add player weight in pounds'
            };
          }
          
          const weight = typeof value === 'string' ? parseInt(value) : value;
          const position = profile?.position;
          const ranges = this.statisticalRanges.get(position) || { weight: [160, 350] };
          
          const isValid = weight >= ranges.weight[0] && weight <= ranges.weight[1];
          
          return {
            valid: isValid,
            severity: isValid ? 'info' as const : 'warning' as const,
            message: isValid ? 'Weight within expected range' : `Weight (${weight} lbs) unusual for ${position}`,
            suggestion: isValid ? undefined : `Expected range for ${position}: ${ranges.weight[0]}-${ranges.weight[1]} lbs`
          };
        }
      },

      // Statistics validation
      {
        field: 'statistics.current_season',
        type: 'logic',
        description: 'Current season statistics should be logical',
        validate: (value, profile) => {
          if (!value) {
            return {
              valid: false,
              severity: 'warning' as const,
              message: 'No current season statistics',
              suggestion: 'Add current season performance data'
            };
          }
          
          const position = profile?.position;
          const issues: string[] = [];
          
          // Position-specific validation
          if (position === 'QB') {
            if (value.passing_yards && value.passing_yards < 0) issues.push('Negative passing yards');
            if (value.passing_touchdowns && value.passing_touchdowns < 0) issues.push('Negative passing TDs');
            if (value.completion_percentage && (value.completion_percentage < 0 || value.completion_percentage > 100)) {
              issues.push('Invalid completion percentage');
            }
          }
          
          if (position === 'RB') {
            if (value.rushing_yards && value.rushing_yards < 0) issues.push('Negative rushing yards');
            if (value.carries && value.carries < 0) issues.push('Negative carries');
          }
          
          return {
            valid: issues.length === 0,
            severity: issues.length > 0 ? 'error' as const : 'info' as const,
            message: issues.length === 0 ? 'Statistics appear valid' : `Statistical issues: ${issues.join(', ')}`,
            suggestion: issues.length > 0 ? 'Review and correct statistical data' : undefined
          };
        }
      },

      // Media Day readiness
      {
        field: 'media_day_talking_points',
        type: 'required',
        description: 'Media Day talking points should be comprehensive',
        validate: (value) => {
          if (!value || typeof value !== 'object') {
            return {
              valid: false,
              severity: 'warning' as const,
              message: 'No Media Day talking points',
              suggestion: 'Generate comprehensive talking points for media interviews'
            };
          }
          
          const expectedTopics = ['season_goals', 'team_dynamics', 'personal_development', 'conference_competition'];
          const providedTopics = Object.keys(value);
          const coverage = providedTopics.filter(topic => expectedTopics.includes(topic)).length;
          
          return {
            valid: coverage >= 3,
            severity: coverage >= 2 ? 'info' as const : 'warning' as const,
            message: `Media talking points cover ${coverage}/4 key areas`,
            suggestion: coverage < 3 ? 'Add more comprehensive media talking points' : undefined
          };
        }
      }
    ];
  }

  private initializeCoachValidationRules(): void {
    this.coachValidationRules = [
      // Required field validations
      {
        field: 'name',
        type: 'required',
        description: 'Coach name must be present',
        validate: (value) => ({
          valid: value && typeof value === 'string' && value.trim().length > 0,
          severity: 'error' as const,
          message: value ? 'Name is present' : 'Coach name is required',
          suggestion: 'Provide the coach\'s full name'
        })
      },
      
      {
        field: 'hire_date',
        type: 'format',
        description: 'Hire date should be valid and reasonable',
        validate: (value) => {
          if (!value || value === 'Research Required') {
            return {
              valid: false,
              severity: 'warning' as const,
              message: 'Hire date not provided',
              suggestion: 'Research and add coach hire date'
            };
          }
          
          const hireDate = new Date(value);
          const currentDate = new Date();
          const year1990 = new Date('1990-01-01');
          
          const isValidDate = !isNaN(hireDate.getTime());
          const isReasonable = hireDate >= year1990 && hireDate <= currentDate;
          
          return {
            valid: isValidDate && isReasonable,
            severity: 'error' as const,
            message: isValidDate && isReasonable ? 'Valid hire date' : 'Invalid hire date',
            suggestion: 'Provide a valid hire date between 1990 and present'
          };
        }
      },

      {
        field: 'career_record',
        type: 'logic',
        description: 'Career record should be logical',
        validate: (value) => {
          if (!value || typeof value !== 'object') {
            return {
              valid: false,
              severity: 'warning' as const,
              message: 'No career record provided',
              suggestion: 'Research and add career win-loss record'
            };
          }
          
          const wins = value.overall_wins;
          const losses = value.overall_losses;
          
          if (typeof wins !== 'number' || typeof losses !== 'number') {
            return {
              valid: false,
              severity: 'error' as const,
              message: 'Career record must be numeric',
              suggestion: 'Provide wins and losses as numbers'
            };
          }
          
          if (wins < 0 || losses < 0) {
            return {
              valid: false,
              severity: 'error' as const,
              message: 'Negative wins or losses',
              suggestion: 'Wins and losses must be non-negative'
            };
          }
          
          const totalGames = wins + losses;
          if (totalGames > 500) {
            return {
              valid: false,
              severity: 'warning' as const,
              message: `Career record seems unusually high (${totalGames} games)`,
              suggestion: 'Verify career record accuracy'
            };
          }
          
          return {
            valid: true,
            severity: 'info' as const,
            message: `Career record: ${wins}-${losses} (${totalGames} games)`,
          };
        }
      },

      {
        field: 'coaching_philosophy.team_culture',
        type: 'format',
        description: 'Team culture should be well defined',
        validate: (value) => ({
          valid: value && typeof value === 'string' && value.length > 0,
          severity: 'info' as const,
          message: value ? 'Team culture defined' : 'Team culture not specified',
          suggestion: 'Add team culture and philosophy details'
        });
          }
          
          // Check if it looks like a reasonable salary format
          const salaryPattern = /\$[\d,]+(\.\d+)?[MK]?\s*(annually|per year)?/i;
          const isValidFormat = salaryPattern.test(value);
          
          return {
            valid: isValidFormat,
            severity: isValidFormat ? 'info' as const : 'warning' as const,
            message: isValidFormat ? 'Salary format appears valid' : 'Salary format may need standardization',
            suggestion: isValidFormat ? undefined : 'Format salary as "$X.XM annually" or similar'
          };
        }
      }
    ];
  }

  private initializeStatisticalRanges(): void {
    // Position-based realistic ranges for validation
    const ranges = {
      'QB': { height: [70, 78], weight: [190, 250] },
      'RB': { height: [68, 74], weight: [180, 230] },
      'WR': { height: [68, 76], weight: [170, 220] },
      'TE': { height: [74, 80], weight: [220, 270] },
      'OL': { height: [74, 80], weight: [280, 350] },
      'DL': { height: [72, 78], weight: [250, 320] },
      'LB': { height: [70, 76], weight: [210, 260] },
      'DB': { height: [68, 74], weight: [170, 210] },
      'K': { height: [68, 74], weight: [170, 200] },
      'P': { height: [70, 76], weight: [180, 220] }
    };
    
    for (const [position, range] of Object.entries(ranges)) {
      this.statisticalRanges.set(position, range);
    }
  }

  private getFieldValue(profile: any, fieldPath: string): any {
    const parts = fieldPath.split('.');
    let current = profile;
    
    for (const part of parts) {
      if (current && typeof current === 'object') {
        current = current[part];
      } else {
        return undefined;
      }
    }
    
    return current;
  }

  private parseHeight(heightStr: string): number {
    // Parse height formats like "6'2\"", "6-2", "74 inches", etc.
    const feetInches = heightStr.match(/(\d+)['‚Ä≤]?[-\s]*(\d+)/);
    if (feetInches) {
      return parseInt(feetInches[1]) * 12 + parseInt(feetInches[2]);
    }
    
    const inches = heightStr.match(/(\d+)\s*(?:inches?|in|")/i);
    if (inches) {
      return parseInt(inches[1]);
    }
    
    return parseInt(heightStr) || 0;
  }

  private calculatePlayerCompleteness(profile: any): any {
    const requiredFields = ['name', 'school', 'position', 'year'];
    const optionalFields = ['physical_attributes', 'statistics', 'recruiting_info', 'background', 'media_day_talking_points'];
    
    const requiredScore = this.calculateFieldCompleteness(profile, requiredFields);
    const optionalScore = this.calculateFieldCompleteness(profile, optionalFields);
    
    return {
      requiredFields: requiredScore,
      optionalFields: optionalScore,
      dataQuality: this.assessDataQuality(profile),
      consistency: this.assessDataConsistency(profile)
    };
  }

  private calculateCoachCompleteness(profile: any): any {
    const requiredFields = ['name', 'school', 'title'];
    const optionalFields = ['hire_date', 'career_record', 'contract_details', 'background', 'coaching_history'];
    
    const requiredScore = this.calculateFieldCompleteness(profile, requiredFields);
    const optionalScore = this.calculateFieldCompleteness(profile, optionalFields);
    
    return {
      requiredFields: requiredScore,
      optionalFields: optionalScore,
      dataQuality: this.assessDataQuality(profile),
      consistency: this.assessDataConsistency(profile)
    };
  }

  private calculateFieldCompleteness(profile: any, fields: string[]): number {
    let completed = 0;
    
    for (const field of fields) {
      const value = this.getFieldValue(profile, field);
      if (value && value !== 'Research Required' && value !== '' && value !== null) {
        completed++;
      }
    }
    
    return completed / fields.length;
  }

  private assessDataQuality(profile: any): number {
    let qualityScore = 1.0;
    
    // Check for placeholder values
    const checkForPlaceholders = (obj: any): void => {
      if (typeof obj === 'string') {
        if (obj === 'Research Required' || obj === 'TBD' || obj === 'Unknown') {
          qualityScore -= 0.1;
        }
      } else if (typeof obj === 'object' && obj !== null) {
        Object.values(obj).forEach(checkForPlaceholders);
      }
    };
    
    checkForPlaceholders(profile);
    
    return Math.max(0, qualityScore);
  }

  private assessDataConsistency(profile: any): number {
    let consistencyScore = 1.0;
    
    // Check for internal consistency
    if (profile?.position && profile?.statistics?.current_season) {
      const position = profile.position;
      const stats = profile.statistics.current_season;
      
      // Position-specific stat consistency checks
      if (position === 'QB' && !stats.passing_yards && stats.rushing_yards > 1000) {
        consistencyScore -= 0.2; // QB with lots of rushing but no passing stats
      }
      
      if (position === 'RB' && !stats.rushing_yards && stats.passing_yards > 0) {
        consistencyScore -= 0.2; // RB with passing stats but no rushing
      }
    }
    
    return Math.max(0, consistencyScore);
  }

  private generatePlayerRecommendations(profile: any, issues: ValidationIssue[]): string[] {
    const recommendations: string[] = [];
    
    const errorIssues = issues.filter(i => i.severity === 'error');
    const warningIssues = issues.filter(i => i.severity === 'warning');
    
    if (errorIssues.length > 0) {
      recommendations.push(`Address ${errorIssues.length} critical data errors`);
    }
    
    if (warningIssues.length > 0) {
      recommendations.push(`Review ${warningIssues.length} data quality warnings`);
    }
    
    if (!profile?.statistics?.current_season) {
      recommendations.push('Add current season performance statistics');
    }
    
    if (!profile?.media_day_talking_points) {
      recommendations.push('Generate comprehensive Media Day talking points');
    }
    
    if (!profile?.recruiting_info) {
      recommendations.push('Research recruiting background and star rating');
    }
    
    return recommendations;
  }

  private generateCoachRecommendations(profile: any, issues: ValidationIssue[]): string[] {
    const recommendations: string[] = [];
    
    const errorIssues = issues.filter(i => i.severity === 'error');
    const warningIssues = issues.filter(i => i.severity === 'warning');
    
    if (errorIssues.length > 0) {
      recommendations.push(`Address ${errorIssues.length} critical data errors`);
    }
    
    if (warningIssues.length > 0) {
      recommendations.push(`Review ${warningIssues.length} data quality warnings`);
    }
    
    if (!profile?.contract_details?.salary || profile.contract_details.salary === 'Research Required') {
      recommendations.push('
    }
    
    if (!profile?.coaching_history) {
      recommendations.push('Add comprehensive coaching history');
    }
    
    if (!profile?.media_day_talking_points) {
      recommendations.push('Generate Media Day talking points and key messages');
    }
    
    return recommendations;
  }

  private calculateOverallScore(report: ProfileValidationReport): number {
    const totalValidations = report.validationsPassed + report.validationsFailed + report.validationsWarning;
    if (totalValidations === 0) return 0;
    
    const passRate = report.validationsPassed / totalValidations;
    const warningPenalty = report.validationsWarning * 0.1;
    const errorPenalty = report.validationsFailed * 0.3;
    
    const completenessBonus = (
      report.completenessMetrics.requiredFields +
      report.completenessMetrics.optionalFields +
      report.completenessMetrics.dataQuality +
      report.completenessMetrics.consistency
    ) / 4 * 0.3;
    
    return Math.max(0, Math.min(100, (passRate * 70) + (completenessBonus * 30) - warningPenalty - errorPenalty));
  }

  private generateBatchSummary(reports: ProfileValidationReport[], processingTime: number): any {
    const totalProfiles = reports.length;
    const avgScore = reports.reduce((sum, r) => sum + r.overallScore, 0) / totalProfiles;
    const totalErrors = reports.reduce((sum, r) => sum + r.validationsFailed, 0);
    const totalWarnings = reports.reduce((sum, r) => sum + r.validationsWarning, 0);
    
    const scoreDistribution = {
      excellent: reports.filter(r => r.overallScore >= 90).length,
      good: reports.filter(r => r.overallScore >= 70 && r.overallScore < 90).length,
      acceptable: reports.filter(r => r.overallScore >= 50 && r.overallScore < 70).length,
      poor: reports.filter(r => r.overallScore < 50).length
    };
    
    const topIssues = this.identifyTopIssues(reports);
    
    return {
      totalProfiles,
      processingTimeMs: processingTime,
      avgProcessingTimeMs: processingTime / totalProfiles,
      avgScore,
      totalErrors,
      totalWarnings,
      scoreDistribution,
      topIssues,
      profilesNeedingAttention: reports.filter(r => r.validationsFailed > 0 || r.overallScore < 70).length
    };
  }

  private identifyTopIssues(reports: ProfileValidationReport[]): any[] {
    const issueCount: Map<string, number> = new Map();
    
    for (const report of reports) {
      for (const issue of report.issues) {
        const key = `${issue.field}: ${issue.message}`;
        issueCount.set(key, (issueCount.get(key) || 0) + 1);
      }
    }
    
    return Array.from(issueCount.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([issue, count]) => ({ issue, count, percentage: (count / reports.length * 100).toFixed(1) }));
  }

  // Public utility methods
  async generateValidationReport(profiles: any[], type: 'player' | 'coach'): Promise<void> {
    console.log(`üìã GENERATING VALIDATION REPORT FOR ${profiles.length} ${type.toUpperCase()} PROFILES`);
    console.log('='.repeat(70));
    
    const { reports, batchSummary } = await this.validateBatch(profiles, type);
    
    console.log('üìä VALIDATION SUMMARY');
    console.log('====================');
    console.log(`‚úÖ Profiles Validated: ${batchSummary.totalProfiles}`);
    console.log(`üìà Average Score: ${batchSummary.avgScore.toFixed(1)}/100`);
    console.log(`‚ùå Total Errors: ${batchSummary.totalErrors}`);
    console.log(`‚ö†Ô∏è  Total Warnings: ${batchSummary.totalWarnings}`);
    console.log(`‚è±Ô∏è  Processing Time: ${(batchSummary.processingTimeMs / 1000).toFixed(1)}s`);
    console.log('');
    
    console.log('üìä SCORE DISTRIBUTION');
    console.log('=====================');
    console.log(`üü¢ Excellent (90-100): ${batchSummary.scoreDistribution.excellent} profiles`);
    console.log(`üîµ Good (70-89): ${batchSummary.scoreDistribution.good} profiles`);
    console.log(`üü° Acceptable (50-69): ${batchSummary.scoreDistribution.acceptable} profiles`);
    console.log(`üî¥ Poor (<50): ${batchSummary.scoreDistribution.poor} profiles`);
    console.log('');
    
    if (batchSummary.topIssues.length > 0) {
      console.log('‚ö†Ô∏è  TOP VALIDATION ISSUES');
      console.log('========================');
      batchSummary.topIssues.forEach((issue: any, index: number) => {
        console.log(`${index + 1}. ${issue.issue} (${issue.count} profiles, ${issue.percentage}%)`);
      });
      console.log('');
    }
    
    if (batchSummary.profilesNeedingAttention > 0) {
      console.log('üö® PROFILES NEEDING ATTENTION');
      console.log('=============================');
      
      const problemProfiles = reports.filter(r => r.validationsFailed > 0 || r.overallScore < 70);
      problemProfiles.forEach((report, index) => {
        console.log(`${index + 1}. ${report.profileId} - Score: ${report.overallScore.toFixed(1)} (${report.validationsFailed} errors, ${report.validationsWarning} warnings)`);
        
        if (report.validationsFailed > 0) {
          const criticalIssues = report.issues.filter(i => i.severity === 'error').slice(0, 3);
          criticalIssues.forEach(issue => {
            console.log(`   ‚ùå ${issue.field}: ${issue.message}`);
          });
        }
      });
    }
    
    console.log('');
    console.log('‚úÖ VALIDATION REPORT COMPLETE');
  }
}

export default ProfileValidationAgent;